<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html on Tech Blog Elo7</title>
    <link>http://elo7.dev/tags/html/</link>
    <description>Recent content in Html on Tech Blog Elo7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Mon, 17 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://elo7.dev/tags/html/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Como o design pode contribuir com a entregabilidade dos emails?</title>
      <link>http://elo7.dev/design-e-entregabilidade-de-emails/</link>
      <pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/design-e-entregabilidade-de-emails/</guid>
      <description>Antes de tudo, uma pergunta importante: você sabe qual a diferença entre entrega e entregabilidade? Não?! Calma, eu explico!
Há quem diga que essas duas palavrinhas são diferentes formas de descrever uma mesma ação. Adianto: ledo engano! Muito embora sejam parecidas, têm conceitos (um pouco) distintos.
Quando falamos de entrega, estamos nos referindo ao número de emails enviados pela plataforma de disparo de email marketing que chegaram aos provedores - Gmail, Hotmail.</description>
    </item>
    
    <item>
      <title>Javascript e acessibilidade</title>
      <link>http://elo7.dev/javascript-e-a11y/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/javascript-e-a11y/</guid>
      <description>Se temos uma web rica em termos de experiência do usuário, muito se deve ao Javascript, que nos permite criar componentes dinâmicos e torna a web uma plataforma muito mais interativa. Porém, com grandes poderes, vêm grandes responsabilidades e, se não tomarmos cuidado, dependendo da solução que implementarmos, podemos prejudicar a usabilidade e a acessibilidade das nossas interfaces. Num post anterior, vimos que até o CSS pode atrapalhar em alguns casos, quem dirá o Javascript!</description>
    </item>
    
    <item>
      <title>Técnicas para codificar um e-mail - parte 4</title>
      <link>http://elo7.dev/tecnicas-para-codificar-um-e-mail-parte-4/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/tecnicas-para-codificar-um-e-mail-parte-4/</guid>
      <description>No terceiro post da série, aprendemos a criar e-mails com conteúdos em colunas e a como deixá-las responsivas. Nesse, iremos comentar sobre algumas dicas gerais e sobre fontes customizadas.
Table x Div Por que ainda usamos a table ao invés de div? A div é bem mais simples e não precisa criar linhas e colunas como a tabela, então por que não usar div&#39;s?
Apesar das div&#39;s serem bem aceitas para a maior parte dos clientes de e-mail, ela ainda não é bem suportada para o Outlook 2007/2010/2013, nos quais algumas propriedades de CSS só funcionam para td.</description>
    </item>
    
    <item>
      <title>Técnicas para codificar um e-mail - parte 3</title>
      <link>http://elo7.dev/tecnicas-para-codificar-um-e-mail-parte-3/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/tecnicas-para-codificar-um-e-mail-parte-3/</guid>
      <description>No segundo post da série, aprendemos a lidar com espaçamento nos e-mails. Neste, iremos abordar como criar conteúdo em colunas e como deixá-las responsivas.
Finalmente chegamos ao conteúdo! Para começar, vamos criar uma nova tabela. É possível usar a mesma tabela do container e alterar o bgcolor para mudar a cor da célula em vez da tabela. Mas aconselho a criar uma nova para evitar problemas com o colspan e rowspan, porque essas propriedades causam problemas para manter a estrutura correta à medida que são criadas novas células.</description>
    </item>
    
    <item>
      <title>Um pouco sobre acessibilidade, CSS e Javascript</title>
      <link>http://elo7.dev/um-pouco-sobre-css-js-a11y/</link>
      <pubDate>Mon, 05 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/um-pouco-sobre-css-js-a11y/</guid>
      <description>Quando se fala em acessibilidade na Web, normalmente as questões giram em torno de recursos mais avançados de navegação, como pop-ups, formulários com AJAX e menus, que exigem código CSS e Javascript para serem implementados. Isso porque, do lado do HTML, as coisas são um pouco mais simples. Ao escrever um HTML semântico, já ganhamos uma página bastante acessível.
Podemos notar isso com formulários, por exemplo. Ao usar os controles de formulário nativos e a validação HTML5, junto com as tags &amp;lt;label&amp;gt;, &amp;lt;fieldset&amp;gt; e &amp;lt;legend&amp;gt;, nossos formulários já são bastante acessíveis.</description>
    </item>
    
    <item>
      <title>Técnicas para codificar um e-mail - parte 2</title>
      <link>http://elo7.dev/tecnicas-para-codificar-um-e-mail-parte-2/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/tecnicas-para-codificar-um-e-mail-parte-2/</guid>
      <description>No primeiro post da série, aprendemos a criar uma base para codificação de e-mail. Neste, iremos abordar as diversas formas de trabalhar com os espaçamentos.
Para começar, vamos adicionar um cabeçalho ao nosso e-mail. Criaremos uma tabela e, dentro dela, adicionaremos um título para o nosso e-mail. Para ficar igual ao layout proposto no primeiro post da série, vamos adicionar o atributo bgcolor para alterar a cor do fundo para marrom claro:</description>
    </item>
    
    <item>
      <title>Front-End - Coisas de que nós nos orgulhamos em 2017!</title>
      <link>http://elo7.dev/retrospectiva-front-end-2017/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/retrospectiva-front-end-2017/</guid>
      <description>2017 foi um ano recheado de projetos interessantes e desafiantes para nós. Neste post vou fazer um resumão deles.
Web APIs A tendência de tornar a web cada vez mais amigável aos usuários, muitas vezes de forma bem parecida ao que acontece com os aplicativos, se mostrou bem forte. E nós temos diversas ferramentas nos navegadores para implementar isso: as Web APIs.
Foi muito divertido testar e implementar algumas delas:</description>
    </item>
    
    <item>
      <title>Técnicas para codificar um e-mail</title>
      <link>http://elo7.dev/tecnicas-para-codificar-um-e-mail/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/tecnicas-para-codificar-um-e-mail/</guid>
      <description>No início da minha carreira como desenvolvedora front-end, tive que codificar o meu primeiro e-mail marketing (aqueles e-mails promocionais que você geralmente recebe de um e-commerce). Como não conhecia muito sobre como funcionavam os clientes de e-mail, fiz o código como se estivesse codificando um site: usei várias propriedade de css, abusei da propriedade float (que na época era moda), usei classes e coloquei todo o css dentro da tag style.</description>
    </item>
    
    <item>
      <title>Customizando campos de formulário com o mask-amd</title>
      <link>http://elo7.dev/customizando-campos-de-formulario-com-elo7-mask-amd/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/customizando-campos-de-formulario-com-elo7-mask-amd/</guid>
      <description>Sempre procuramos uma biblioteca que seja bem focada no problema que queremos resolver e frequentemente encontramos aqueles pacotes com várias funcionalidades. Normalmente, utilizamos apenas um recurso (ou alguns) da biblioteca que escolhemos utilizar.
É importante mencionar o peso inútil no final do carregamento da página, agora imagine quando você utiliza várias bibliotecas em seu site.
Esse tipo de situação é muito comum e, pensando nesse problema, nós do Elo7 resolvemos escrever nossas próprias bibliotecas, diretas no que necessitamos na casa, e isso vem sendo bem bacana pois, além de otimizar nossas aplicações, ainda as disponibilizamos para comunidade.</description>
    </item>
    
    <item>
      <title>As &#34;states&#34; e &#34;properties&#34; do atributo role no WAI-ARIA</title>
      <link>http://elo7.dev/wai-aria-states-properties/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/wai-aria-states-properties/</guid>
      <description>Neste terceiro post da série sobre WAI-ARIA, trataremos sobre os estados (states) e propriedades (properties) das roles. Caso queira saber mais, fizemos um apanhado geral introdutório sobre o WAI-ARIA e sobre o seu papel no html.
Os termos states e properties referem-se a características semelhantes. Ambos fornecem informações específicas sobre um objeto, e ambos fazem parte da definição da natureza das roles. São aplicados como atributos de marcação de arias prefixados.</description>
    </item>
    
    <item>
      <title>Os papéis do WAI-ARIA no HTML</title>
      <link>http://elo7.dev/wai-aria-roles/</link>
      <pubDate>Mon, 17 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/wai-aria-roles/</guid>
      <description>O ARIA se divide semanticamente em três partes: seus papéis (roles), estados (states) e suas propriedades (properties). As roles (papéis) descrevem widgets que não estão disponíveis no HTML 4, como sliders, barras de menus, guias e diálogos. As properties (propriedades) descrevem características desses widgets, como se eles são arrastáveis, têm um elemento necessário ou têm um popup associado a eles. Os states (estados) descrevem o estado de interação atual de um elemento, informando a tecnologia de assistência se ela estiver ocupada, desativada, selecionada ou ocultada.</description>
    </item>
    
    <item>
      <title>Um apanhado geral sobre o WAI-ARIA</title>
      <link>http://elo7.dev/wai-aria-apanhado-geral/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/wai-aria-apanhado-geral/</guid>
      <description>Com a evolução da web, os sites estão ficando cada vez mais dinâmicos, utilizando muitos recursos de AJAX, JavaScript e CSS. Essas mudanças melhoram muito a usabilidade na web, porém usuários de tecnologias assistivas correm risco de serem excluídos por conta das lacunas de acessibilidade. Como leitores de tela normalmente sofrem com JavaScript, surge uma nova maneira de criar interfaces dinâmicas que são acessíveis a mais usuários.
A maioria dos frameworks de JavaScript oferece ferramentas do lado do cliente que simulam o comportamento de interfaces desktop e mobile para se tornarem mais familiares, como drag and drop, menu hamburguer deslizante&amp;hellip; Todos eles são criados nessa combinação de JavaScript, CSS e HTML.</description>
    </item>
    
    <item>
      <title>A importância da semântica no HTML - parte II</title>
      <link>http://elo7.dev/html-semantico-2/</link>
      <pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/html-semantico-2/</guid>
      <description>Neste segundo post da série sobre a importância da semântica para os usuários e desenvolvedores, trataremos sobre como podemos melhorar nosso conteúdo de forma que os buscadores entendam o que realmente estamos oferecendo, com a menor possibilidade de ruídos de informação possível. Saberemos de maneira prática como podemos melhorar a disponibilidade de nosso conteúdo.
Caso não tenha lido o nosso primeiro post, basta acessar aqui.
Dando significado ao HTML Lembram do uso da palavra “lembrança” que utilizamos no post anterior?</description>
    </item>
    
    <item>
      <title>A importância da semântica no HTML - parte I</title>
      <link>http://elo7.dev/html-semantico-1/</link>
      <pubDate>Mon, 26 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://elo7.dev/html-semantico-1/</guid>
      <description>Antigamente a informação era armazenada em papéis, rochas e até paredes. A única forma de encontrar o que queríamos era indo até o local no qual a mensagem estava armazenada. Hoje existe todo um mundo digital que gera terabytes de dados por segundo.
E para onde vai toda essa informação? Será que ficou mais fácil encontrar o que se deseja? O problema atual não é a escassez, mas a porção de ruído proveniente de uma quantidade exorbitante de dados.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on Tech Blog Elo7</title>
    <link>https://elo7.dev/tags/mysql/</link>
    <description>Recent content in Mysql on Tech Blog Elo7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-BR</language>
    <lastBuildDate>Mon, 23 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://elo7.dev/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introdução ao Change Data Capture (CDC)</title>
      <link>https://elo7.dev/cdc-parte-1/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://elo7.dev/cdc-parte-1/</guid>
      <description>A atual popularidade do termo Big Data veio acompanhada de diversas buzzwords, entre elas o Change Data Capture, ou simplesmente CDC. Porém esse design pattern é tão antigo quanto os RDBMS, pois os dois estão estritamente ligados.
Como o próprio nome diz, o CDC nada mais é do que uma forma de capturar as mudanças nos dados. Vamos imaginar a seguinte tabela de produto:
CREATE TABLE `produto` ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, nome VARCHAR(30) NOT NULL, preco DECIMAL(15,2) NOT NULL, quantidade INT NOT NULL, data_atualizacao DATETIME );  com o seguinte insert:</description>
    </item>
    
    <item>
      <title>API Persistente com Kotlin, Spring Boot, MySQL, JPA e Hibernate</title>
      <link>https://elo7.dev/api-persistente-com-kotlin-springboot-mysql-jpa-hibernate/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elo7.dev/api-persistente-com-kotlin-springboot-mysql-jpa-hibernate/</guid>
      <description>Kotlin vem ganhando muita popularidade nos últimos tempos devido a seus recursos de produtividade e a possibilidade de utilização na plataforma Android.
Devido à crescente popularidade do Kotlin, o Spring Framework também introduziu um suporte dedicado ao Kotlin.
Neste post, você aprenderá a criar uma API do CRUD Restful com o Kotlin, Spring Boot e JPA.
O que vamos construir? Neste post criaremos APIs Restful para armazenar dados de livros e categorias.</description>
    </item>
    
    <item>
      <title>Otimização de queries lentas em bancos relacionais</title>
      <link>https://elo7.dev/otimizacao-bd/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://elo7.dev/otimizacao-bd/</guid>
      <description>Quando começamos a desenvolver um novo sistema, a performance do banco de dados parece não ser um problema muito importante, mas com o aumento do número de usuários e, consequentemente, dos dados que precisam ser armazenados, queries que executavam em milisegundos passam a demorar segundos ou até mesmo minutos para serem executadas. Para ilustrar esse problema, vamos utilizar um exemplo simples:
Imagine que precisamos desenvolver um cadastro simples de compradores para um comércio eletrônico.</description>
    </item>
    
  </channel>
</rss>